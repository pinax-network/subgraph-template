type Action @entity {
  account:                  String!
  name:                     String!
  jsonData:                 String!
  transaction:              Transaction!

  receiver:                 String!
  index:                    BigInt!
  id:                       ID!
  rawData:                  String!
  isNotify:                 Boolean!
  isInput:                  Boolean!
  block:                    Block!
  dbOps:                    [DbOp!]! @derivedFrom(field: "action")
  authorizations:           [Authorization!]! @derivedFrom(field: "action")
}

type DbOp @entity {
  code:                     String!
  tableName:                String!
  scope:                    String!
  newDataJson:              String!

  id:                       ID!
  transaction:              Transaction!
  index:                    BigInt!
  operation:                String!
  actionIndex:              BigInt!
  primaryKey:               String!
  oldData:                  String!
  newData:                  String!
  oldDataJson:              String!
  action:                   Action!
}

type Transaction @entity {
  id:                     ID!
  block:                  Block!
  index:                  BigInt!
  elapsed:                BigInt!
  netUsage:               BigInt!
  actions:                [Action!]! @derivedFrom(field: "transaction")
  dbOps:                  [DbOp!]! @derivedFrom(field: "transaction")
}

type Authorization @entity {
  id:                 ID!
  actor:              String!
  permission:         String!
  action:             Action!
  transaction:        Transaction!
}

type Block @entity {
  id:                 ID!
  date:               String!
  time:               BigInt! #Convert as Timestamp: https://github.com/pinax-network/antelope-transactions-subgraph/issues/2
  number:             BigInt!
  previous:           String!
  producer:           String!
  transactions:       [Transaction!]! @derivedFrom(field: "block")
}